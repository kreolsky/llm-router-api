#!/usr/bin/env python3
"""
–í–Ω–µ—à–Ω–∏–π —Ç–µ—Å—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è TTFT (Time To First Token)
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ —Ä–∞–±–æ—Ç–∞—é—â–µ–º—É —Å–µ—Ä–≤–∏—Å—É
"""

import asyncio
import sys
import httpx
import time
import json
import statistics
import logging
from typing import List, Dict, Any

# –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8777"
API_KEY = "dummy"  # –ò–∑ config/user_keys.yaml
TEST_MODEL = "local/orange"  # –ú–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

# ANSI color codes for output
GREEN = "\033[92m"
RED = "\033[91m"
YELLOW = "\033[93m"
BLUE = "\033[94m"
RESET = "\033[0m"

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def print_test(name: str):
    logger.info(f"\n{BLUE}{'='*60}{RESET}")
    logger.info(f"{BLUE}–¢–ï–°–¢: {name}{RESET}")
    logger.info(f"{BLUE}{'='*60}{RESET}")


def print_success(msg: str):
    logger.info(f"{GREEN}‚úì {msg}{RESET}")


def print_error(msg: str):
    logger.error(f"{RED}‚úó {msg}{RESET}")


def print_warning(msg: str):
    logger.warning(f"{YELLOW}‚ö† {msg}{RESET}")


class TTFTTester:
    """–¢–µ—Å—Ç–µ—Ä TTFT —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å—ã"""
    
    def __init__(self):
        self.client = httpx.AsyncClient()
    
    async def measure_single_ttft(self, payload: Dict[str, Any], test_name: str = "") -> Dict[str, float]:
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ TTFT –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        start_time = time.time()
        first_token_time = None
        token_count = 0
        
        try:
            async with self.client.stream(
                "POST",
                f"{BASE_URL}/v1/chat/completions",
                headers={"Authorization": f"Bearer {API_KEY}"},
                json=payload,
                timeout=30.0
            ) as response:
                if response.status_code != 200:
                    return {"error": f"HTTP {response.status_code}"}
                
                async for chunk in response.aiter_bytes():
                    if first_token_time is None:
                        first_token_time = time.time()
                        ttft = first_token_time - start_time
                        break
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ SSE
                    decoded = chunk.decode('utf-8')
                    if 'data: ' in decoded and '[DONE]' not in decoded:
                        try:
                            data = json.loads(decoded[6:])
                            content = data.get('choices', [{}])[0].get('delta', {}).get('content', '')
                            if content:
                                token_count += 1
                        except:
                            pass
                
                return {
                    "ttft_ms": ttft * 1000,
                    "first_token_time": first_token_time,
                    "start_time": start_time,
                    "token_count": token_count,
                    "test_name": test_name
                }
                
        except Exception as e:
            return {"error": str(e)}
    
    async def test_basic_ttft(self) -> Dict[str, Any]:
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç TTFT"""
        print_test("–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç TTFT")
        
        payload = {
            "model": TEST_MODEL,
            "messages": [{"role": "user", "content": "Hello! Tell me about AI."}],
            "stream": True,
            "max_tokens": 50
        }
        
        result = await self.measure_single_ttft(payload, "–ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        
        if "error" in result:
            print_error(f"–û—à–∏–±–∫–∞: {result['error']}")
            return {"success": False, "result": result}
        
        print_success(f"TTFT: {result['ttft_ms']:.2f}ms")
        print_success(f"–¢–æ–∫–µ–Ω–æ–≤: {result['token_count']}")
        
        return {"success": True, "result": result}
    
    async def test_ttft_comparison(self) -> Dict[str, Any]:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ TTFT –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print_test("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ TTFT –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        test_cases = [
            {
                "name": "–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å",
                "payload": {
                    "model": TEST_MODEL,
                    "messages": [{"role": "user", "content": "Hi"}],
                    "stream": True,
                    "max_tokens": 10
                }
            },
            {
                "name": "–ó–∞–ø—Ä–æ—Å —Å —ç–º–æ–¥–∑–∏",
                "payload": {
                    "model": TEST_MODEL,
                    "messages": [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! üöÄ"}],
                    "stream": True,
                    "max_tokens": 20
                }
            },
            {
                "name": "–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å",
                "payload": {
                    "model": TEST_MODEL,
                    "messages": [{"role": "user", "content": "Explain quantum computing in simple terms"}],
                    "stream": True,
                    "max_tokens": 100
                }
            },
            {
                "name": "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å",
                "payload": {
                    "model": TEST_MODEL,
                    "messages": [
                        {"role": "user", "content": "I'm learning about machine learning"},
                        {"role": "assistant", "content": "That's great! Machine learning is a fascinating field."},
                        {"role": "user", "content": "Can you tell me more about neural networks?"}
                    ],
                    "stream": True,
                    "max_tokens": 50
                }
            }
        ]
        
        results = []
        
        for test_case in test_cases:
            logger.info(f"\nüìä –¢–µ—Å—Ç: {test_case['name']}")
            result = await self.measure_single_ttft(test_case['payload'], test_case['name'])
            
            if "error" in result:
                print_error(f"–û—à–∏–±–∫–∞: {result['error']}")
                results.append({"name": test_case['name'], "error": result['error']})
            else:
                print_success(f"TTFT: {result['ttft_ms']:.2f}ms")
                print_success(f"–¢–æ–∫–µ–Ω–æ–≤: {result['token_count']}")
                results.append(result)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        valid_results = [r for r in results if "error" not in r]
        
        if valid_results:
            ttft_values = [r['ttft_ms'] for r in valid_results]
            avg_ttft = statistics.mean(ttft_values)
            min_ttft = min(ttft_values)
            max_ttft = max(ttft_values)
            
            logger.info(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TTFT:")
            logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ: {avg_ttft:.2f}ms")
            logger.info(f"   –ú–∏–Ω–∏–º—É–º: {min_ttft:.2f}ms")
            logger.info(f"   –ú–∞–∫—Å–∏–º—É–º: {max_ttft:.2f}ms")
            
            return {
                "success": True,
                "results": results,
                "statistics": {
                    "avg_ttft": avg_ttft,
                    "min_ttft": min_ttft,
                    "max_ttft": max_ttft,
                    "count": len(valid_results)
                }
            }
        else:
            return {"success": False, "results": results}
    
    async def test_concurrent_ttft(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç TTFT –ø—Ä–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"""
        print_test("TTFT –ø—Ä–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö")
        
        payload = {
            "model": TEST_MODEL,
            "messages": [{"role": "user", "content": "Quick test"}],
            "stream": True,
            "max_tokens": 10
        }
        
        concurrent_requests = 5
        tasks = []
        
        for i in range(concurrent_requests):
            task = asyncio.create_task(
                self.measure_single_ttft(payload, f"–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å {i+1}")
            )
            tasks.append(task)
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        successful_results = []
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                print_error(f"–ó–∞–ø—Ä–æ—Å {i+1}: {result}")
            elif "error" in result:
                print_error(f"–ó–∞–ø—Ä–æ—Å {i+1}: {result['error']}")
            else:
                print_success(f"–ó–∞–ø—Ä–æ—Å {i+1}: TTFT {result['ttft_ms']:.2f}ms")
                successful_results.append(result)
        
        if successful_results:
            ttft_values = [r['ttft_ms'] for r in successful_results]
            avg_ttft = statistics.mean(ttft_values)
            
            logger.info(f"\nüìä –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            logger.info(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(successful_results)}/{concurrent_requests}")
            logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ TTFT: {avg_ttft:.2f}ms")
            
            return {
                "success": True,
                "results": successful_results,
                "concurrent_stats": {
                    "avg_ttft": avg_ttft,
                    "success_rate": len(successful_results) / concurrent_requests
                }
            }
        else:
            return {"success": False, "results": results}
    
    async def test_ttft_stability(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ TTFT"""
        print_test("–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å TTFT")
        
        payload = {
            "model": TEST_MODEL,
            "messages": [{"role": "user", "content": "Test stability"}],
            "stream": True,
            "max_tokens": 10
        }
        
        iterations = 10
        results = []
        
        for i in range(iterations):
            logger.info(f"  –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/{iterations}...")
            result = await self.measure_single_ttft(payload, f"–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å {i+1}")
            
            if "error" in result:
                print_error(f"–û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {i+1}: {result['error']}")
            else:
                results.append(result['ttft_ms'])
                logger.info(f"    TTFT: {result['ttft_ms']:.2f}ms")
        
        if results:
            avg_ttft = statistics.mean(results)
            stdev_ttft = statistics.stdev(results) if len(results) > 1 else 0
            min_ttft = min(results)
            max_ttft = max(results)
            
            logger.info(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏:")
            logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ: {avg_ttft:.2f}ms")
            logger.info(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {stdev_ttft:.2f}ms")
            logger.info(f"   –ú–∏–Ω–∏–º—É–º: {min_ttft:.2f}ms")
            logger.info(f"   –ú–∞–∫—Å–∏–º—É–º: {max_ttft:.2f}ms")
            logger.info(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {(stdev_ttft/avg_ttft)*100:.1f}%")
            
            return {
                "success": True,
                "results": results,
                "stability_stats": {
                    "avg_ttft": avg_ttft,
                    "stdev_ttft": stdev_ttft,
                    "min_ttft": min_ttft,
                    "max_ttft": max_ttft,
                    "coefficient_of_variation": (stdev_ttft/avg_ttft)*100
                }
            }
        else:
            return {"success": False, "results": []}
    
    async def run_comprehensive_ttft_test(self) -> Dict[str, Any]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TTFT"""
        print_test("–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TTFT")
        
        all_results = {}
        
        # –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
        basic_result = await self.test_basic_ttft()
        all_results["basic"] = basic_result
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
        comparison_result = await self.test_ttft_comparison()
        all_results["comparison"] = comparison_result
        
        # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        concurrent_result = await self.test_concurrent_ttft()
        all_results["concurrent"] = concurrent_result
        
        # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        stability_result = await self.test_ttft_stability()
        all_results["stability"] = stability_result
        
        return all_results
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.client.aclose()


def analyze_ttft_results(results: Dict[str, Any]) -> None:
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ TTFT"""
    logger.info(f"\n{BLUE}{'='*60}{RESET}")
    logger.info(f"{BLUE}–ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í TTFT{RESET}")
    logger.info(f"{BLUE}{'='*60}{RESET}")
    
    # –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
    if "basic" in results and results["basic"]["success"]:
        basic = results["basic"]["result"]
        logger.info(f"üéØ –ë–∞–∑–æ–≤—ã–π TTFT: {basic['ttft_ms']:.2f}ms")
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        if basic['ttft_ms'] < 1000:
            logger.info(f"{GREEN}‚úì –û—Ç–ª–∏—á–Ω—ã–π TTFT (< 1s){RESET}")
        elif basic['ttft_ms'] < 2000:
            logger.info(f"{YELLOW}‚ö†Ô∏è  –•–æ—Ä–æ—à–∏–π TTFT (1-2s){RESET}")
        else:
            logger.info(f"{RED}‚úó –ú–µ–¥–ª–µ–Ω–Ω—ã–π TTFT (> 2s){RESET}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    if "comparison" in results and results["comparison"]["success"]:
        comparison = results["comparison"]
        stats = comparison["statistics"]
        
        logger.info(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤:")
        logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ TTFT: {stats['avg_ttft']:.2f}ms")
        logger.info(f"   –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['min_ttft']:.2f}ms")
        logger.info(f"   –•—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['max_ttft']:.2f}ms")
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–ø—É
        for result in comparison["results"]:
            if "error" not in result:
                logger.info(f"   {result['test_name']}: {result['ttft_ms']:.2f}ms")
    
    # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if "concurrent" in results and results["concurrent"]["success"]:
        concurrent = results["concurrent"]
        stats = concurrent["concurrent_stats"]
        
        logger.info(f"\nüîÑ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:")
        logger.info(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']*100:.1f}%")
        logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ TTFT: {stats['avg_ttft']:.2f}ms")
    
    # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
    if "stability" in results and results["stability"]["success"]:
        stability = results["stability"]
        stats = stability["stability_stats"]
        
        logger.info(f"\nüìà –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:")
        logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ TTFT: {stats['avg_ttft']:.2f}ms")
        logger.info(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {stats['stdev_ttft']:.2f}ms")
        logger.info(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {stats['coefficient_of_variation']:.1f}%")
        
        # –û—Ü–µ–Ω–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        if stats['coefficient_of_variation'] < 20:
            logger.info(f"{GREEN}‚úì –í—ã—Å–æ–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (< 20% –≤–∞—Ä–∏–∞—Ü–∏–∏){RESET}")
        elif stats['coefficient_of_variation'] < 50:
            logger.info(f"{YELLOW}‚ö†Ô∏è  –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (20-50%){RESET}")
        else:
            logger.info(f"{RED}‚úó –ù–∏–∑–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (> 50%){RESET}")
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    logger.info(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    has_data = any(
        key in results and results[key]["success"] 
        for key in ["basic", "comparison", "concurrent", "stability"]
    )
    
    if has_data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π TTFT
        basic_ttft = None
        if "basic" in results and results["basic"]["success"]:
            basic_ttft = results["basic"]["result"]["ttft_ms"]
        
        if basic_ttft:
            if basic_ttft > 3000:
                logger.info(f"   üîß TTFT —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π ({basic_ttft:.0f}ms). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
                logger.info(f"      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç–µ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É")
                logger.info(f"      - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é")
                logger.info(f"      - –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CDN")
            elif basic_ttft > 1500:
                logger.info(f"   ‚ö†Ô∏è  TTFT –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã ({basic_ttft:.0f}ms), –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω")
            else:
                logger.info(f"   ‚úì TTFT –≤ —Ö–æ—Ä–æ—à–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ ({basic_ttft:.0f}ms)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        if "stability" in results and results["stability"]["success"]:
            cv = results["stability"]["stability_stats"]["coefficient_of_variation"]
            if cv > 50:
                logger.info(f"   üîß –ù–∏–∑–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å TTFT. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
                logger.info(f"      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
                logger.info(f"      - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤")
                logger.info(f"      - –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        logger.info(f"   üìä –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ TTFT —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
        logger.info(f"      - –í–Ω–µ–¥—Ä–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ TTFT")
        logger.info(f"      - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è")
        logger.info(f"      - –†–µ–≥—É–ª—è—Ä–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã")
    else:
        logger.info(f"   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info(f"{BLUE}{'='*60}{RESET}")
    logger.info(f"{BLUE}–ò–ó–ú–ï–†–ï–ù–ò–ï TTFT (TIME TO FIRST TOKEN){RESET}")
    logger.info(f"{BLUE}{'='*60}{RESET}")
    logger.info(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤: {BASE_URL}")
    logger.info(f"API Key: {API_KEY}")
    
    tester = TTFTTester()
    
    try:
        # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        results = await tester.run_comprehensive_ttft_test()
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        analyze_ttft_results(results)
        
        # –ò—Ç–æ–≥
        successful_tests = sum(1 for v in results.values() if v.get("success", False))
        total_tests = len(results)
        
        logger.info(f"\n{BLUE}{'='*60}{RESET}")
        logger.info(f"{BLUE}–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´{RESET}")
        logger.info(f"{BLUE}{'='*60}{RESET}")
        logger.info(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests}")
        
        if successful_tests == total_tests:
            logger.info(f"{GREEN}‚úì –í—Å–µ —Ç–µ—Å—Ç—ã TTFT –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!{RESET}\n")
            return 0
        else:
            logger.info(f"{YELLOW}‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏.{RESET}\n")
            return 1
            
    except Exception as e:
        logger.error(f"\n{RED}–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}{RESET}\n")
        return 1
    
    finally:
        await tester.close()


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)