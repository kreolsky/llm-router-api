#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import sys
import os
import json
import asyncio
sys.path.append('.')

from src.core.sanitizer import MessageSanitizer
from src.services.chat_service.stream_processor import StreamProcessor
from src.core.config_manager import ConfigManager


def demo_sanitization():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏"""
    print("üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤\n")
    
    # –ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    contaminated_chunk = {
        "choices": [{
            "index": 0,
            "delta": {
                "content": "Hello",
                "reasoning_content": "Let me think...",
                "done": True,  # –ü—Ä–æ–±–ª–µ–º–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è OpenRouter
                "__internal__": "secret_data",  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø–æ–ª–µ
                "stream_end": True,  # –ï—â–µ –æ–¥–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –ø–æ–ª–µ
                "__stream_end__": True  # –ò –µ—â–µ –æ–¥–Ω–æ
            },
            "finish_reason": "stop"
        }]
    }
    
    print("üì• –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —á–∞–Ω–∫:")
    print(json.dumps(contaminated_chunk, indent=2))
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—é
    sanitized_chunk = MessageSanitizer.sanitize_stream_chunk(contaminated_chunk, enabled=True)
    
    print("\nüì§ –°–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞–Ω–∫:")
    print(json.dumps(sanitized_chunk, indent=2))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
    original_delta = contaminated_chunk["choices"][0]["delta"]
    sanitized_delta = sanitized_chunk["choices"][0]["delta"]
    
    removed_fields = []
    for field in original_delta:
        if field not in sanitized_delta:
            removed_fields.append(field)
    
    print(f"\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {removed_fields}")
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {list(sanitized_delta.keys())}")


def demo_stream_processing():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∏–º–∞"""
    print("\nüåä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∏–º–∞\n")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–µ–π
    os.environ["SANITIZE_MESSAGES"] = "true"
    config_manager = ConfigManager()
    
    # –°–æ–∑–¥–∞–µ–º StreamProcessor
    processor = StreamProcessor(config_manager)
    
    # –≠–º—É–ª–∏—Ä—É–µ–º —Å—Ç—Ä–∏–º —Å –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    async def mock_stream():
        chunks = [
            b'data: {"choices":[{"index":0,"delta":{"content":"Hello","done":true}}]}\n\n',
            b'data: {"choices":[{"index":0,"delta":{"reasoning_content":"thinking","__internal__":"data"}}]}\n\n',
            b'data: {"choices":[{"index":0,"delta":{"content":" world","stream_end":true}}]}\n\n',
            b'data: [DONE]\n\n'
        ]
        
        for chunk in chunks:
            print(f"üì• –ü–æ–ª—É—á–µ–Ω —á–∞–Ω–∫: {chunk.decode('utf-8').strip()}")
            yield chunk
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º
    print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∏–º–∞ —Å —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–µ–π...")
    
    async def process():
        chunk_count = 0
        async for chunk in processor.process_stream(mock_stream(), "test_model", "req_123", "user_123"):
            chunk_count += 1
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–∞–Ω–∫ {chunk_count}: {chunk.decode('utf-8').strip()}")
    
    asyncio.run(process())
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = processor.get_processing_stats()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"  –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {stats['total_chunks_processed']}")
    print(f"  –°–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_chunks_sanitized']}")
    print(f"  –†atio —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏: {stats['sanitization_ratio']:.2%}")
    print(f"  –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: {stats['sanitization_enabled']}")


def demo_provider_compatibility():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏"""
    print("\nüîå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏\n")
    
    # OpenRouter - —Å—Ç—Ä–æ–≥–∏–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
    openrouter_chunk = {
        "choices": [{
            "index": 0,
            "delta": {
                "content": "Response from OpenRouter",
                "done": True,  # –í—ã–∑–æ–≤–µ—Ç 400 –æ—à–∏–±–∫—É
                "__internal__": "client_data"  # –¢–æ–∂–µ –ø—Ä–æ–±–ª–µ–º–∞
            }
        }]
    }
    
    print("üî¥ OpenRouter (—Å—Ç—Ä–æ–≥–∏–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä):")
    print("  –î–æ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏: —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è 'done' –∏ '__internal__' ‚Üí 400 Bad Request")
    
    sanitized = MessageSanitizer.sanitize_stream_chunk(openrouter_chunk, enabled=True)
    print("  –ü–æ—Å–ª–µ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏: —Ç–æ–ª—å–∫–æ 'content' ‚Üí –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
    
    # Anthropic - –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π
    anthropic_chunk = {
        "choices": [{
            "index": 0,
            "delta": {
                "content": "Response",
                "reasoning_content": "Complex reasoning",
                "done": True,  # –õ—É—á—à–µ —É–¥–∞–ª–∏—Ç—å
                "__internal__": "metadata"
            }
        }]
    }
    
    print("\nüü° Anthropic (–≥–∏–±–∫–∏–π, –Ω–æ –ª—É—á—à–µ —á–∏—Å—Ç–∏—Ç—å):")
    print("  –î–æ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏: —Å–æ–¥–µ—Ä–∂–∏—Ç reasoning_content –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è")
    
    sanitized = MessageSanitizer.sanitize_stream_chunk(anthropic_chunk, enabled=True)
    print("  –ü–æ—Å–ª–µ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏: reasoning_content —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è —É–¥–∞–ª–µ–Ω—ã")
    
    # Ollama - —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω—ã–π
    ollama_chunk = {
        "choices": [{
            "index": 0,
            "delta": {
                "content": "Local response",
                "done": True,
                "custom_field": "preserved"  # –ù–µ –≤ —Å–ø–∏—Å–∫–µ SERVICE_FIELDS
            }
        }]
    }
    
    print("\nüü¢ Ollama (—Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω—ã–π):")
    print("  –î–æ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏: —Å–æ–¥–µ—Ä–∂–∏—Ç done –∏ custom_field")
    
    sanitized = MessageSanitizer.sanitize_stream_chunk(ollama_chunk, enabled=True)
    print("  –ü–æ—Å–ª–µ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏: done —É–¥–∞–ª–µ–Ω, custom_field —Å–æ—Ö—Ä–∞–Ω–µ–Ω")


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π"""
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏")
    print("=" * 60)
    
    demo_sanitization()
    demo_stream_processing()
    demo_provider_compatibility()
    
    print("\n" + "=" * 60)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:")
    print("  ‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç—Ä–æ–≥–∏–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ (OpenRouter)")
    print("  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (content, reasoning_content)")
    print("  ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥ SANITIZE_MESSAGES")
    print("  ‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è tolerant –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    print("  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")


if __name__ == "__main__":
    main()